/*
Given an unsorted array of integers, find the length of the longest consecutive elements sequence.
For example,
Given [100, 4, 200, 1, 3, 2],
The longest consecutive elements sequence is [1, 2, 3, 4]. Return its length: 4.
Your algorithm should run in O(n) complexity.
*/

//首先要注意的是，这题很容易忘记给定数组里有重复元素，必须要把这个input考虑到，并处理
//实际上这是一个merge区间的问题，两个相邻的区间做merge，只要找到左区间的左边界以及右区间的有边界
//然后让这两个边界点保存着合并之后的区域的大小，就能保证这个合并了的区间在和新的区间合并时，不会出错

public int longestConsecutive(int[] num) {
    if (num == null || num.length == 0) return 0;
    HashMap<Integer,Integer> map = new HashMap<Integer,Integer> ();
    int max = 1, len = 1;
    for (int i = 0; i < num.length; i++) {
        if (map.containsKey(num[i])) continue;
        map.put(num[i],1);
        if (map.containsKey(num[i]-1)) {len = merge(num[i]-1, num[i],map);}
        max = Math.max(len,max);
        if (map.containsKey(num[i]+1)) {len = merge(num[i], num[i]+1, map);}
        max = Math.max(len,max);
    }
    return max;
}

private int merge(int low, int high, HashMap<Integer, Integer> map) {
    int lLen = map.get(low);
    int hLen = map.get(high);
    int lBound = low-lLen+1;
    int hBound = high+hLen-1;
    int len = lLen + hLen;
    map.put(lBound, len);
    map.put(hBound, len);
    return len;
}
	