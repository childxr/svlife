/*
Given s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2.
For example,
Given:
s1 = "aabcc",
s2 = "dbbca",
When s3 = "aadbbcbcac", return true.
When s3 = "aadbbbaccc", return false.
*/

//这道题讨论S1, S2, S3的关系:
//假设S1(i-1)是子串S1从1 - i-1 
//S2(j-1)是子串S2从1 - j-1
//S3(i+j-2)是由串S1(i-1)和S2(j-1)组成的结果
//用函数函数f(i,j)表示串S3是否能被S1(i)，S2(j)交叉组成的结果S3(i+j),分情况讨论如下：
//(1)假如s1(i) = s3(i+j) & s2(j) = s3(i+j) -> f(i,j) = f(i-1,j)||f(i,j-1)
//(2)假如s1(i) = s3(i+j) & s2(j) != s3(i+j)-> f(i,j) = f(i-1,j)
//(3)假如s1(i) != s3(i+j) & s2(j) = s3(i+j)-> f(i,j) = f(i,j-1)
//(4) otherwise f(i,j) = F
//考虑到S1,S2,S3可以为""的情况，所以动态表要多加一行一列

public boolean isInterleave(String s1, String s2, String s3) {
    if(s1 == null || s2 == null || s3 == null || s1.length() + s2.length() != s3.length()) return false;
    boolean[][] map = new boolean[s1.length()+1][s2.length()+1];
    map[0][0] = true;
    for (int i = 1; i <= s1.length(); i++) {
        if (s1.charAt(i-1) == s3.charAt(i-1)) map[i][0] = map[i-1][0];
    }
    for (int i = 1; i <= s2.length(); i++) {
        if (s2.charAt(i-1) == s3.charAt(i-1)) map[0][i] = map[0][i-1];
    }
    
    for (int i = 1; i <= s1.length(); i++) {
        for (int j = 1; j <= s2.length(); j++) {
            if (s1.charAt(i-1) == s3.charAt(i+j-1) && s2.charAt(j-1) == s3.charAt(i+j-1)) {
                map[i][j] = (map[i-1][j] || map[i][j-1]);
            } else if (s1.charAt(i-1) == s3.charAt(i+j-1)) {
                map[i][j] = map[i-1][j];
            } else if (s2.charAt(j-1) == s3.charAt(i+j-1)) {
                map[i][j] = map[i][j-1];
            } 
        }
    }
    return map[s1.length()][s2.length()];
}