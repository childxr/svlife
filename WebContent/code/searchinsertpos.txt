/*
Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.
You may assume no duplicates in the array.
Here are few examples.
[1,3,5,6], 5 → 2
[1,3,5,6], 2 → 1
[1,3,5,6], 7 → 4
[1,3,5,6], 0 → 0
*/

//这道题是Binary Search的变形
//因为插入的位置可能在数组最后一个元素后
//所以可以假定数组有len+1个元素
//然后在半开半闭区间[1,len+1)内进行二叉查找
//因为右区间是开区间，所以在缩小范围时，用h = m 而不是h=m-1

public int searchInsert(int[] A, int target) {
    if (A == null || A.length == 0) return 0;
    int l = 0, h = A.length;
    while (l < h) {
        int m = (l+h)/2;
        if (A[m] == target) return m;
        else if (A[m] < target) l = m+1;
        else h = m;
    }
    return h;
}

public int searchInsert(int[] A, int target) {
    if (A == null || A.length == 0) return 0;
    int low = 0, high = A.length-1, mid;
    while (low <= high) {
        mid = (low + high)/2;
        if(A[mid] == target || (mid > low && 
		(A[mid-1]) < target && target < A[mid])) return mid;
        else if (target < A[mid]) high = mid - 1;
        else low = mid + 1;
    }
    return low;
}