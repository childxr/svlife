/*
Given a binary tree, determine if it is height-balanced.
For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.
*/

//这道题是maximum depth的变形
//从上到下的计算高度
//如果左右两高度相差大于1，则返回-1，证明此时的树已经不是平衡树了

public boolean isBalanced(TreeNode root) {
    if (root == null) return true;
    return height(root) != -1;
}
private int height(TreeNode root) {
    if (root == null) return 0;
    int left = height(root.left);
    if (left == -1) return -1;
    int right = height(root.right);
    if (right == -1) return -1;
    if (Math.abs(left - right) > 1) return -1;
    return Math.max(left, right)+1;
    
}