/*
Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).
You may assume that the intervals were initially sorted according to their start times.
Example 1:
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].
Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].
This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].
*/

//这道题的退出条件是新的interval被插入，并且整个interval list遍历完毕
//每一次，我们都将新的interval和当前遍历到的interval比较，找出它们中的较小的
//然后将这个较小值与结果数组里的最后一个元素比较，如果overlap的话，就merge
//注意的是，如果new interval的start比当前遍历的interval的end小,或相等
//说明new interval已经added了

public ArrayList<Interval> insert(ArrayList<Interval> intervals, Interval newInterval) {
    if (newInterval == null || intervals == null) return new ArrayList<Interval>();
    if (intervals.size() == 0) {intervals.add(newInterval); return intervals;}
    ArrayList<Interval> ret = new ArrayList<Interval>();
    boolean added = false;
    int i = 0;
    while (true) {
        if (added && i == intervals.size()) break;
        Interval smaller = newInterval;
        if (added || (i < intervals.size() && smaller.start > intervals.get(i).end)) {
			smaller = intervals.get(i++);
		}
        else added = true;
        if (ret.size() == 0 || !overlap(smaller, ret.get(ret.size()-1))) ret.add(smaller);
        else {
            Interval last = ret.get(ret.size()-1);
            last.start =  Math.min(smaller.start, last.start);
            last.end = Math.max(smaller.end, last.end);
        } 
    }
    return ret;
}

private boolean overlap(Interval a, Interval b) {
    Interval smaller = a.start > b.start ? b : a;
    Interval greater = a.start > b.start ? a : b;
    return greater.start > smaller.end? false : true;
}