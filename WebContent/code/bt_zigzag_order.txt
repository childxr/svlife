/*
Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).
For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]
*/

//和层次遍历有所区别的是，这道题用的是两个栈作为辅助数据结构
//并且还加入了一个方向标志，用于控制从树的左边节点为入栈起点，还是右边


public ArrayList<ArrayList<Integer>> zigzagLevelOrder(TreeNode root) {
    // Note: The Solution object is instantiated only once and is reused by each test case.
    ArrayList<ArrayList<Integer>> ret = new ArrayList<ArrayList<Integer>> ();
    if (root == null) return ret;
    boolean inorder = true;
    LinkedList<TreeNode> last = new LinkedList<TreeNode> ();
    LinkedList<TreeNode> cur = new LinkedList<TreeNode> ();
    last.add(root);
    while (!last.isEmpty()) {
        ArrayList<Integer> tmp = new ArrayList<Integer> ();
        while(!last.isEmpty()){
            TreeNode n = last.pop();
            tmp.add(n.val);
            if (inorder) {
                if (n.left != null) cur.push(n.left);
                if (n.right != null) cur.push(n.right);
            } else {
                if (n.right != null) cur.push(n.right);
                if (n.left != null) cur.push(n.left);
            }
        }
        ret.add(tmp);
        LinkedList<TreeNode> p = last;
        last = cur;
        cur = p;
        inorder = !inorder;
    }
    return ret;
}