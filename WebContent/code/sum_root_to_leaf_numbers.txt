/*
Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.
An example is the root-to-leaf path 1->2->3 which represents the number 123.
Find the total sum of all root-to-leaf numbers.
For example,
    1
   / \
  2   3
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.
Return the sum = 12 + 13 = 25.
*/


//这道题是先序遍历的变形
//从上到下，path的值为cumulated的val * 10 + 当前节点的值
//当走到空节点，返回0
//走到叶子节点，返回计算出的值
//否则从左右两边分别计算path值，求和返回

public int sumNumbers(TreeNode root) {
    if (root == null) return 0;
    return sumNumbers(root, 0);
}
private int sumNumbers(TreeNode root, int val) {
    if (root == null) return 0;
    else if (root.left == null && root.right == null) 
		return (val * 10 + root.val);
    else return sumNumbers(root.left, val*10 + root.val) 
	+ sumNumbers(root.right, val * 10 + root.val);
}