/*
Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.
For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \      \
        7    2      1
return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.
*/

//这道题是先序续遍历的变形
//分别从左右两边计算路径长度
//如果任意一边找到路径，则返回T
//如果都找不着，就返回F
//递归退出的条件是，到达叶子节点时，当前路径长度与目标长度的比值
//当然，如果root为null,返回F

public boolean hasPathSum(TreeNode root, int sum) {
    if(root == null) return false;
    return hasPath(root, sum, 0);
}
private boolean hasPath(TreeNode root, int sum, int cur) {
    if (root == null) return false;
    if (root.left == null && root.right == null) return cur+root.val == sum;
    if (hasPath(root.left, sum, cur+root.val)) return true;
    if (hasPath(root.right, sum, cur+root.val)) return true;
    return false;
}