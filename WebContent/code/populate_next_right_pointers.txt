/*
Given a binary tree
    struct TreeLinkNode {
      TreeLinkNode *left;
      TreeLinkNode *right;
      TreeLinkNode *next;
    }
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.
Initially, all next pointers are set to NULL.
Given the following perfect binary tree,
         1
       /  \
      2    3
     / \  / \
    4  5  6  7
After calling your function, the tree should look like:
         1 -> NULL
       /  \
      2 -> 3 -> NULL
     / \  / \
    4->5->6->7 -> NULL
*/

//这道题是图的层次遍历的变形
//用两个队列来进行，一个用于populate
//一个用于存储当前节点的子节点，为下一层做准备

public void connect(TreeLinkNode root) {
    if(root == null) return;
    LinkedList<TreeLinkNode> prev = new LinkedList<TreeLinkNode> ();
    LinkedList<TreeLinkNode> cur = new LinkedList<TreeLinkNode> ();
    prev.add(root);
    while (!prev.isEmpty()) {
        TreeLinkNode head = new TreeLinkNode(0);
        while (!prev.isEmpty()) {
            head.next = prev.removeFirst();
            head = head.next;
            if (head.left != null) cur.add(head.left);
            if (head.right != null) cur.add(head.right);
        }
        LinkedList<TreeLinkNode> tmp = prev;
        prev = cur;
        cur = tmp;
    }
}

public void connect(TreeLinkNode root) {
    // Note: The Solution object is instantiated only once and is reused by each test case.
    TreeLinkNode last = root;
    while (last != null) {
        TreeLinkNode curr = null;
        TreeLinkNode pre = null;
        for (TreeLinkNode p = last; p != null; p = p.next) {
            TreeLinkNode left = p.left;
            TreeLinkNode right = p.right;
            if(left == null && right == null) continue;
            if (curr == null) curr = (left != null) ? left : right;
            if (pre != null) pre.next = (left != null) ? left : right;
            if (left != null) left.next = right;
            pre = (right != null)? right : left;
        }
        last = curr;
    }
}