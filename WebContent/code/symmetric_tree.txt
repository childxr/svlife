/*
Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).
For example, this binary tree is symmetric:
    1
   / \
  2   2
 / \ / \
3  4 4  3
But the following is not:
    1
   / \
  2   2
   \   \
   3    3
*/

//这道题是先序遍历的变形
//两子树必须是对称的
//也就是左子树的左子树要和右子树的右子树相同
//左子树的右子树要和右子树的左子树相同
//根据这一规则进行判断

public boolean isSymmetric(TreeNode root) {
    if (root == null) return true;
    return symmetric(root.left, root.right);
}
private boolean symmetric(TreeNode p, TreeNode q) {
    if (p == null && q == null) return true;
    if (p == null || q == null) return false;
    if (p.val != q.val) return false;
    return symmetric(p.left, q.right) && symmetric(p.right, q.left);
}