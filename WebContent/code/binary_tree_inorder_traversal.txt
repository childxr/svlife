/*
Given a binary tree, return the inorder traversal of its nodes' values.
For example:
Given binary tree {1,#,2,3},
   1
    \
     2
    /
   3
return [1,3,2].
Note: Recursive solution is trivial, could you do it iteratively?
*/

//这道题巧妙的利用了栈和cur指针（初始为根节点）
//如果当前节点不为空，则一直往左走，将途中遇到的所有节点入栈
//当当前节点已经为空了，检查栈中元素是否存在
//如果存在，则弹出栈顶元素打印，然后将当前指针update为弹出元素的右节点
//重复以上步骤直到cur为空且栈也为空即可

public ArrayList<Integer> inorderTraversal(TreeNode root) {
    ArrayList<Integer> ret = new ArrayList<Integer> ();
    if (root == null) return ret;
    Stack<TreeNode> st = new Stack<TreeNode> ();
    TreeNode cur = root;
    while (cur != null || !st.isEmpty()) {
        while (cur != null) {
            st.push(cur);
            cur = cur.left;
        }
        if (!st.isEmpty()) {
            cur = st.pop();
            ret.add(cur.val);
            cur = cur.right;
        }
    }
    return ret;
}