/*
Given preorder and inorder traversal of a tree, construct the binary tree.
Note:
You may assume that duplicates do not exist in the tree.
*/

//这道题的思路是：访问preorder的元素，建立根节点
//然后找到该元素在inorder中的位置
//该位置把inorder分成两半，左边的为该元素左子树的节点
//右边的为该元素的右节点
//然后继续以上步骤，递归的建树

public TreeNode buildTree(int[] preorder, int[] inorder) {
    if (preorder == null || inorder == null || preorder.length == 0 || inorder.length == 0 || preorder.length != inorder.length) return null;
    HashMap<Integer, Integer> map = new HashMap<Integer, Integer> ();
    for (int i = 0; i < inorder.length; i++) map.put(inorder[i], i);
    int[] index = {-1};
    return buildTree(preorder, inorder, map, index, 0, preorder.length-1);
}
private TreeNode buildTree(int[] preorder, int[] inorder, HashMap<Integer, Integer> map, int[] index, int low, int high) {
    if (low > high) return null;
    index[0] += 1;
    TreeNode root = new TreeNode(preorder[index[0]]);
    int in = map.get(preorder[index[0]]);
    root.left = buildTree(preorder, inorder, map, index, low, in-1);
    root.right = buildTree(preorder, inorder, map, index, in+1, high);
    return root;
}