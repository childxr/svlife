/*
Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST
*/

//这道题则是中序遍历和二叉查找的结合
//BST的特点就是，如果对其进行中序遍历，得到的则是一个有序数组
//因为涉及到的是List,所以遍历时，用的是地址来存储当前的list节点值
//这样才能保证在递归时，用到的节点是正确的节点
//而low和high的设置，则是用来locate节点的具体位置的


public TreeNode sortedListToBST(ListNode head) {
    if (head == null) return null;
    int high = lens(head) - 1;
    ListNode[] h = new ListNode[1];
    h[0] = head;
    return sortedListToBST(h, 0, high);
}
private int lens(ListNode head) {
    int i = 0;
    for (ListNode p = head; p != null; p = p.next) i++;
    return i;
}
private TreeNode sortedListToBST(ListNode[] head, int low, int high) {
    if (low > high) return null;
    int mid = (low + high)/2;
    TreeNode left = sortedListToBST(head, low, mid-1);
    TreeNode root = new TreeNode(head[0].val);
    head[0] = head[0].next;
    TreeNode right = sortedListToBST(head, mid+1, high);
    root.left = left;
    root.right = right;
    return root;
}