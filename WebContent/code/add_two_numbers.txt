/*
You are given two linked lists representing two non-negative numbers. 
The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
*/

//这道题也是merge sort步骤里，merge的变形
//注意空指针的判断，和迭代指针的更新（不要漏掉）

public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    if (l1 == null && l2 == null) return null;
    if (l1 == null || l2 == null) return l1 == null ? l2 : l1;
    ListNode head = new ListNode(0);
    ListNode runner = head;
    int c = 0, sum = 0;
    while (l1 != null || l2 != null || c > 0) {
        if (l1 != null && l2 != null) {
            sum = c+l1.val+l2.val;
            l1 = l1.next;
            l2 = l2.next;
        } else if (l1 != null) {
            sum = c+l1.val;
            l1 = l1.next;
        } else if (l2 != null){
            sum = c+l2.val;
            l2 = l2.next;
        } else {
            sum = c;
        }
        runner.next = new ListNode(sum%10);
        runner = runner.next;
        c = sum/10;
    }
    return head.next;
}
