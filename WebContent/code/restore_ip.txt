/*
Given a string containing only digits, restore it by returning all possible valid IP address combinations.
For example:
Given "25525511135",
return ["255.255.11.135", "255.255.111.35"]. (Order does not matter)
*/

//这道题的解题思路是：
//对于IP地址的每一节的数字进行组合尝试
//根据IP地址的特点，可以知道，一个IP只能包含四组数字，每一组的数字范围在0-255
//因此，可以考虑到用递归，对每一节的IP地址做相同的validation
//可以检查的方面有字符串的长度会不会太长，或者太短；尝试的字符串子串有没有越界；字符串子串是否在规定范围之内
//只有pass了validation的数字才能进行下一层的递归
//特别注意的是，当且仅当到达最后一层，并且已经没有待处理的字符串了，递归才能退出

public ArrayList<String> restoreIpAddresses(String s) {
    if (s == null || s.length() == 0) return new ArrayList<String> ();
    ArrayList<String> ret = new ArrayList<String> ();
    restoreIP(s, 0, 0, new StringBuffer(), ret);
    return ret;
}

private void restoreIP(String s, int start, int level, StringBuffer bf, ArrayList<String> ret) {
    if (level == 4 && start == s.length()) {
        ret.add(bf.substring(0, bf.length()-1));
    } else {
        if (s.length() - start > (4 - level) * 3) return;
        if (s.length() - start < 4 - level) return;
        for (int i = 1; i <= 3; i++) {
            if (start + i > s.length()) continue;
            String word = s.substring(start, start+i);
            if (word.startsWith("0") && i > 1) continue;
            if (Integer.valueOf(word) > 255) continue;
            bf.append(word+".");
            restoreIP(s, start+i, level+1, bf, ret);
            for (int j = 0; j < i+1; j++) bf.deleteCharAt(bf.length()-1);
        }
    }
}